import numpy as np
from scipy import signal,misc,ndimage
from skimage import filters,feature,img_as_float
from skimage.io import imread
from skimage.color import rgb2gray
from PIL import Image,ImageFilter
import matplotlib.pylab as pylab
import matplotlib.pylab as plt
from skimage.util import random_noise
from skimage.filters import gaussian
from scipy import signal
import numpy as np

def plot_image (image,title):
    pylab.imshow(image),pylab.title(title,size=20),pylab.axis('off')

ker_x=[[-1,1]]
ker_y=[[-1],[1]]
im=rgb2gray(imread('elephant.jpg'))
im_x=signal.convolve2d(im,ker_x,mode='same')
im_y=signal.convolve2d(im,ker_y,mode='same')
im_mag=np.sqrt(im_x**2+im_y**2)
im_dir=np.arctan(im_y/im_x)
pylab.gray()
pylab.figure(figsize=(30,20))
pylab.subplot(231),plot_image(im,'original'),pylab.subplot(232),plot_image(im_x,'grad_x')
pylab.subplot(233),plot_image(im_y,'grad_y'),pylab.subplot(234),plot_image(im_mag,'||grad||')
pylab.subplot(235),plot_image(im_dir,r'$\theta$'),pylab.subplot(236)
pylab.plot(range(im.shape[1]),im[0,:],'b-',label=r'$f(x,y)|_{x=0}$',linewidth=5)

pylab.plot(range(im.shape[1]),im_x[0,:],'r-',label=r'$grad_x(f(x,y))|_{x=0}$')
pylab.title(r'$grad_x(f(x,y))|_{x=0}$',size=30)
pylab.legend(prop={'size':20})
pylab.show()

ker_x=[[-1,1]]
ker_y=[[-1],[1]]
im=rgb2gray(imread('elephant.jpg'))
#im=random_noise(im,var=sigma**2)
#im=gaussian(im,sigma=0.25)
print(np.max(im))
im_x=np.clip(signal.convolve2d(im,ker_x,mode='same'),0,1)
im_y=np.clip(signal.convolve2d(im,ker_y,mode='same'),0,1)
im_mag=np.sqrt(im_x**2+im_y**2)
im_ang=np.arctan(im_y/im_x)
plt.gray()
plt.figure(figsize=(10,15))
plt.subplot(321)
plt.imshow(im)
plt.title('original',size=30)
plt.axis('off')
plt.subplot(322)
plt.imshow(im_x)
plt.title('grad_x',size=30)
plt.axis('off')
plt.subplot(323)
plt.imshow(im_y)
plt.title('grad_y',size=30)
plt.axis('off')
plt.subplot(324)
plt.imshow(im_mag)
plt.title('||grad||',size=30)
plt.axis('off')
plt.subplot(325)
plt.imshow(im_ang)
plt.title(r'$\theta$',size=30)
plt.axis('off')
plt.subplot(326)
im=np.zeros((im.shape[0],im.shape[1],3))
im[...,0]=im_mag*np.sin(im_ang)
im[...,1]=im_mag*np.cos(im_ang)
plt.imshow(im)
plt.title(r'||grad||+$\theta$',size=30)
plt.axis('off')
plt.show()
