import numpy as np
from skimage import data,img_as_float,img_as_ubyte,exposure,io,color
from skimage.io import imread
from skimage.exposure import cumulative_distribution
from skimage.restoration import denoise_bilateral,denoise_nl_means,estimate_sigma
#fromskimage.measureimportcompare_psnr
from skimage.util import random_noise
from skimage.color import rgb2gray
from PIL import Image,ImageEnhance,ImageFilter
from scipy import ndimage,misc
import matplotlib.pylab as pylab

def plot_image(image,title=""):
    pylab.title(title,size=20),pylab.imshow(image)
    pylab.axis('off')

def plot_hist(r,g,b,title=''):
    r,g,b=img_as_ubyte(r),img_as_ubyte(g),img_as_ubyte(b)
    pylab.hist(np.array(r).ravel(),bins=256,range=(0,256),color='r',alpha=0.5)
    pylab.hist(np.array(g).ravel(),bins=256,range=(0,256),color='g',alpha=0.5)
    pylab.hist(np.array(b).ravel(),bins=256,range=(0,256),color='b',alpha=0.5)
    pylab.xlabel('PixelValues',size=20),pylab.ylabel('Frequency',size=20)
    pylab.title(title,size=20)

im=Image.open('elephant2.jpeg')
im_r,im_g,im_b=im.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_image(im,'OriginalImage')
pylab.subplot(122),plot_hist(im_r,im_g,im_b,'HistpgramofRGBImage')
pylab.show()

im=im.point(lambda i:255*np.log(1+i/255))
im_r,im_g,im_b=im.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_image(im,'ImageafterLogTransformation')
pylab.subplot(122),plot_hist(im_r,im_g,im_b,'HistogramofLogtransformforRGB channel')
pylab.show()

im=img_as_float(imread('bird.jpg'))
#im_r,im_g,im_b=im.split()
gamma=2.5
im1=im**gamma
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_hist(im[...,0],im[...,1],im[...,2],'HistogramforRGB channel(Input)')
pylab.subplot(122),plot_hist(im1[...,0],im1[...,1],im1[...,2],'Histogramfor RGBOutput')
pylab.show()
pylab.figure(figsize=(15,5))
pylab.subplot(121),plot_image(im,'Imageoriginal')
pylab.subplot(122),plot_image(im1,'Output')
pylab.show()

im=Image.open('bird.jpg')
im_r,im_g,im_b=im.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121)

plot_image(im)
pylab.subplot(122)
plot_hist(im_r,im_g,im_b)
pylab.show()

def contrast(c):
    return 0 if c <50 else (255 if c >150 else (255*c-22950)/48)

im1=im.point(contrast)
im_r,im_g,im_b=im1.split()
pylab.style.use('ggplot')
pylab.figure(figsize=(15,5))
pylab.subplot(121)
plot_image(im1)
pylab.subplot(122)
plot_hist(im_r,im_g,im_b)
pylab.yscale('log',basey=10)
pylab.show()

im=Image.open('elephant.jpg').convert('L')
pylab.hist(np.array(im).ravel(),bins=256,range=(0,256),color='g')
pylab.xlabel('Pixelvalues'),pylab.ylabel('Frequency')
pylab.title('HistogramofPixelvalues')
pylab.show()
pylab.figure(figsize=(12,18))
pylab.gray()
pylab.subplot(221),plot_image(im,'OriginalImage')
pylab.axis('off')
th=[0,50,100,150,200]
for i in range (2,5):
    im1=im.point(lambda x:x > th[i])
    pylab.subplot(2,2,i),plot_image(im1,'binaryImagewith threshold='+str(th[i]))
    
pylab.show()